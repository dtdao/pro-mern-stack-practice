{"version":3,"sources":["../server/server.js"],"names":["sourceMapSupport","install","Error","app","use","express","static","bodyParser","json","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","db","collection","find","toArray","then","metadata","total_count","issues","length","_metadata","records","catch","err","status","message","post","newIssue","body","created","Date","Issue","validateIssue","insertOne","_id","result","insertedId","limit","next","MongoClient","connect","client","listen"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport { MongoClient } from 'mongodb';\r\nimport Issue from './issue.js';\r\nimport 'babel-polyfill';\r\nimport sourceMapSupport from 'source-map-support';\r\nsourceMapSupport.install();\r\n\r\nthrow new Error('Test');\r\n\r\nconst app = express();\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\nif(process.env.NODE_ENV !== 'producation'){\r\n\tconst webpack = require(\"webpack\");\r\n\tconst webpackDevMiddleware = require(\"webpack-dev-middleware\");\r\n\tconst webpackHotMiddleware = require(\"webpack-hot-middleware\");\r\n\r\n\tconst config = require(\"../webpack.config\");\r\n\tconfig.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\r\n\tconfig.plugins.push(new webpack.HotModuleReplacementPlugin());\r\n\r\n\tconst bundler = webpack(config);\r\n\tapp.use(webpackDevMiddleware(bundler, { noInfo: true}));\r\n\tapp.use(webpackHotMiddleware(bundler, { log: console.log}));\r\n}\r\n\r\napp.get('/api/issues', (req, res) => {\r\n\tdb.collection('issues').find().toArray().then(issues => {\r\n\t\tconst metadata = {total_count: issues.length};\r\n\t\tres.json({_metadata: metadata, records: issues});\r\n\t}).catch(err => {\r\n\t\tconsole.log(err);\r\n\t\tres.status(500).json({message: `Internal Server Error: ${err}`});\r\n\t})\r\n})\r\n\r\n\r\n\r\n// app.get(\"/api/issues\", (req, res) => {\r\n// \tconst metaData = {total_count: issues.length};\r\n// \tres.json({_metadata: metaData, records: issues});\r\n// });\r\n\r\napp.post(\"/api/issues\", (req, res) => {\r\n\tconst newIssue = req.body;\r\n\t// newIssues.id = issues.length + 1;\r\n\tnewIssue.created = new Date();\r\n\tif(!newIssue.status){\r\n\t\tnewIssue.status = \"New\"\r\n\t}\r\n\tconst err = Issue.validateIssue(newIssue)\r\n\r\n\tif(err){\r\n\t\tres.status(422).json({message: `Invalid request: ${err}`});\r\n\t\treturn;\r\n\t}\r\n\r\n\t///WHY!!!!!!!!?!?!?!?!?!?!?!?!\r\n\tdb.collection('issues').insertOne(newIssue).then(result => \r\n\t\t db.collection('issues').find({_id: result.insertedId}).limit(1).next()\r\n\t).then(newIssue =>\r\n\t\tres.json(newIssue)\r\n\t).catch(err => { \r\n\t\tconsole.log(err);\r\n\t\tres.status(500).json({message: `Internal Server Error: ${err}`});\r\n\t})\r\n\r\n})\r\n\r\n// let db;\r\n// MongoClient.connect(\"mongodb://localhost:27017/issuetracker\").then(connection =>{\r\n// \tdb = connection;\r\n// \tapp.listen(3000, () => {\r\n// \t\tconsole.log(\"App started on Port 3000\");\r\n// \t})\r\n// }).catch(err => {\r\n// \tconsole.log(\"ERROR: \", err);\r\n// });\r\n\r\nlet db;\r\nMongoClient.connect(\"mongodb://localhost:27017/\", (err, client) => {\r\n\tdb = client.db(\"issuetracker\");\r\n\tif(err) {\r\n\t\tconsole.log(\"ERROR: \", err);\r\n\t\treturn;\r\n\t}\r\n\tapp.listen(3000, () => {\r\n\t\tconsole.log(\"App started on port 3000\");\r\n\t})\r\n})\r\n// MongoClient.connect('mongodb://localhost:27017/', (err, client) => {\r\n// \tdb = client.db(\"issuetracker\");\r\n// \tapp.listen(3000, () => {\r\n// \t\tconsole.log(\"App started on port 3000\");\r\n// \t})\r\n\r\n// \tdb.collection('issues').find().toArray().then(issues => {\r\n// \t\tconst metaData = {total_count: issues.length}\r\n// \t\tres.json({_metadata: metaData, records: issues})\r\n// \t}).catch(err =>{\r\n// \t\tconsole.log(err);\r\n// \t\tres.status(500).json({message: `Internal Server Error: ${err}`});\r\n// \t})\r\n// })\r\n"]}